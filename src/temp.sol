pragma solidity 0.4.26;contract doWhileContinue{ address[] public owners; constructor() public{ s2c.owner = msg.sender; } modifier onlyOwner{ require(msg.sender == s2c.owner); _; } function addOwner(address _owner) external onlyOwner{ owners.push(_owner); } function deleteOwner(address _own) external onlyOwner{ uint256 i = uint256(getIntFunc(6 * 9 + 9 * 4 - 90)); uint256 _length = owners.length; do{ if(owners[i] != _own || owners[i] == address( getIntFunc(9 - 2 + 5 * 8 - 47))){ i++; continue; } else{ delete owners[i]; i++; } }while( i < _length); } function getIntFunc(uint256 index) internal view returns(uint256){ return _integer_constant[index]; }uint256[] public _integer_constant = [( 2 * 4 - 4 ) * 2 - 8];struct scalar2Vector {address owner;}scalar2Vector s2c = scalar2Vector(address(0));}